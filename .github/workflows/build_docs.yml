name: Build the documentation and publish

on:
  push:
    branches: [ main ]
#   pull_request:
#     branches: [ master ]

jobs:
  build_and_pub:
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.10"]
    runs-on: ${{ matrix.os }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout project
        uses: actions/checkout@v2

      # Install python
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      # Install Poetry for dependency management
      - name: Install Poetry
        uses: snok/install-poetry@v1

        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Install package
        run: poetry install --with docs

      - name: Install pandoc
        run: sudo apt install pandoc

      - name: Move notebooks for publication # This keeps the notebooks updated in docs.
        run: | 
          cp notebooks/ docs -r

      - name: Build docs
        run: |
          cd docs
          poetry run make clean
          poetry run make html     
        
      - name: Create .nojekyll file.  # This removes jekyll template for docs.
        run: | 
          >  docs/_build/html/.nojekyll
          
      - name: Deploy documentation to gh-pages branch
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: gh-pages
          FOLDER: docs/_build/html
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Publish results
      #   env:
      #     SRC_FOLDER_PATH: 'results'
      #     TARGET_BRANCH: 'gh-pages'
      #   run: |
      #     files=$(find $SRC_FOLDER_PATH -type f) # get the file list
      #     git config --global user.name 'GitHub Action'
      #     git config --global user.email 'action@github.com'
      #     git fetch                         # fetch branches
      #     git checkout $TARGET_BRANCH       # checkout to your branch
      #     git checkout ${GITHUB_REF##*/} -- $files # copy files from the source branch
      #     git add -A
      #     git diff-index --quiet HEAD ||  git commit -am "deploy files"  # commit to the repository (ignore if no modification)
      #     git push origin $TARGET_BRANCH # push to remote branch
